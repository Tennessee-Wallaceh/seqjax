from _typeshed import Incomplete
from absl.testing import parameterized
from distrax._src.bijectors.bijector import Bijector as Bijector
from distrax._src.bijectors.rational_quadratic_spline import (
    RationalQuadraticSpline as RationalQuadraticSpline,
)
from distrax._src.bijectors.tanh import Tanh as Tanh
from distrax._src.distributions.categorical import Categorical as Categorical
from distrax._src.distributions.distribution import Distribution as Distribution
from distrax._src.distributions.normal import Normal as Normal
from distrax._src.distributions.transformed import Transformed as Transformed
from distrax._src.utils import conversion as conversion

tfb: Incomplete
tfd: Incomplete
FLAGS: Incomplete

def setUpModule() -> None: ...

class AsBijectorTest(parameterized.TestCase):
    def test_num_bins_attr_of_rational_quadratic_spline(self) -> None: ...
    def test_on_tfp_bijector(self) -> None: ...

class AsDistributionTest(parameterized.TestCase):
    def test_loc_attr_of_normal(self) -> None: ...
    def test_num_categories_attr_of_categorical(self) -> None: ...
    def test_attrs_of_transformed_distribution(self): ...
    def test_on_tfp_distribution(self) -> None: ...

class ToTfpTest(parameterized.TestCase):
    def test_on_distrax_distribution(self) -> None: ...
    def test_on_distrax_bijector(self) -> None: ...
    def test_on_tfp_distribution(self) -> None: ...
    def test_on_tfp_bijector(self) -> None: ...

class AsFloatArrayTest(parameterized.TestCase):
    def test_on_valid_scalar(self, x) -> None: ...
    def test_on_invalid_scalar(self, x) -> None: ...
    def test_on_float_array(self, dtype) -> None: ...
    def test_on_int_array(self, dtype) -> None: ...
    def test_on_invalid_array(self, dtype) -> None: ...
