from _typeshed import Incomplete

Array: Incomplete

def multiply_no_nan(x: Array, y: Array) -> Array: ...
def add_maybe_symbolic(x, y): ...
def scale_maybe_symbolic(result_aval, tangent, scale): ...
def multiply_no_nan_jvp(
    primals: tuple[Array, Array], tangents: tuple[Array, Array]
) -> tuple[Array, Array]: ...
def power_no_nan(x: Array, y: Array) -> Array: ...
def power_no_nan_jvp(
    primals: tuple[Array, Array], tangents: tuple[Array, Array]
) -> tuple[Array, Array]: ...
def mul_exp(x: Array, logp: Array) -> Array: ...
def normalize(*, probs: Array | None = None, logits: Array | None = None) -> Array: ...
def sum_last(x: Array, ndims: int) -> Array: ...
def log_expbig_minus_expsmall(big: Array, small: Array) -> Array: ...
def log_beta(a: Array, b: Array) -> Array: ...
def log_beta_multivariate(a: Array) -> Array: ...
