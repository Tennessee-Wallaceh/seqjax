import abc
import typing
from _typeshed import Incomplete
from distrax._src.utils import jittable as jittable

tfb: Incomplete
Array: Incomplete

class Bijector(jittable.Jittable, metaclass=abc.ABCMeta):
    def __init__(
        self,
        event_ndims_in: int,
        event_ndims_out: int | None = None,
        is_constant_jacobian: bool = False,
        is_constant_log_det: bool | None = None,
    ) -> None: ...
    def forward(self, x: Array) -> Array: ...
    def inverse(self, y: Array) -> Array: ...
    def forward_log_det_jacobian(self, x: Array) -> Array: ...
    def inverse_log_det_jacobian(self, y: Array) -> Array: ...
    @abc.abstractmethod
    def forward_and_log_det(self, x: Array) -> tuple[Array, Array]: ...
    def inverse_and_log_det(self, y: Array) -> tuple[Array, Array]: ...
    @property
    def event_ndims_in(self) -> int: ...
    @property
    def event_ndims_out(self) -> int: ...
    @property
    def is_constant_jacobian(self) -> bool: ...
    @property
    def is_constant_log_det(self) -> bool: ...
    @property
    def name(self) -> str: ...
    def same_as(self, other: Bijector) -> bool: ...

BijectorLike: Incomplete
BijectorT = typing.TypeVar("BijectorT", bound=Bijector)
