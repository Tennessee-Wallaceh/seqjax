from _typeshed import Incomplete
from distrax._src.bijectors import bijector as base
from distrax._src.utils import conversion as conversion, math as math

Array: Incomplete
BijectorLike: Incomplete
BijectorT: Incomplete

class Block(base.Bijector):
    def __init__(self, bijector: BijectorLike, ndims: int) -> None: ...
    @property
    def bijector(self) -> BijectorT: ...
    @property
    def ndims(self) -> int: ...
    def forward(self, x: Array) -> Array: ...
    def inverse(self, y: Array) -> Array: ...
    def forward_log_det_jacobian(self, x: Array) -> Array: ...
    def inverse_log_det_jacobian(self, y: Array) -> Array: ...
    def forward_and_log_det(self, x: Array) -> tuple[Array, Array]: ...
    def inverse_and_log_det(self, y: Array) -> tuple[Array, Array]: ...
    @property
    def name(self) -> str: ...
    def same_as(self, other: base.Bijector) -> bool: ...
