from _typeshed import Incomplete
from distrax._src.bijectors import bijector as base

Array: Incomplete

def check_affine_parameters(matrix: Array, bias: Array) -> None: ...

class UnconstrainedAffine(base.Bijector):
    def __init__(self, matrix: Array, bias: Array) -> None: ...
    @property
    def matrix(self) -> Array: ...
    @property
    def bias(self) -> Array: ...
    def forward(self, x: Array) -> Array: ...
    def forward_log_det_jacobian(self, x: Array) -> Array: ...
    def forward_and_log_det(self, x: Array) -> tuple[Array, Array]: ...
    def inverse(self, y: Array) -> Array: ...
    def inverse_log_det_jacobian(self, y: Array) -> Array: ...
    def inverse_and_log_det(self, y: Array) -> tuple[Array, Array]: ...
    def same_as(self, other: base.Bijector) -> bool: ...
