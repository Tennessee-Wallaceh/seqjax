from _typeshed import Incomplete
from absl.testing import parameterized
from distrax._src.bijectors import (
    block as block,
    chain as chain,
    scalar_affine as scalar_affine,
)
from distrax._src.distributions import normal as normal, transformed as transformed
from distrax._src.utils import conversion as conversion

tfd: Incomplete
tfb: Incomplete
RTOL: float

class ChainTest(parameterized.TestCase):
    seed: Incomplete
    def setUp(self) -> None: ...
    def test_properties(self) -> None: ...
    def test_event_shape(self, mu, sigma, base_dist) -> None: ...
    def test_sample_shape(self, mu, sigma, sample_shape, base_dist): ...
    def test_log_prob(self, mu, sigma, value, base_dist) -> None: ...
    def test_prob(self, mu, sigma, value, base_dist) -> None: ...
    def test_sample_and_log_prob(self, mu, sigma, sample_shape, base_dist): ...
    def test_method(self, function_string, mu, sigma, base_dist) -> None: ...
    def test_batched_bijectors(self, outer_shape, inner_shape, input_shape) -> None: ...
    def test_raises_on_empty_list(self) -> None: ...
    def test_raises_on_incompatible_dimensions(self) -> None: ...
    def test_integer_inputs(self, inputs) -> None: ...
    def test_jittable(self): ...
