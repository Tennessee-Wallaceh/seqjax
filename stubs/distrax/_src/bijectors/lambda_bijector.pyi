from _typeshed import Incomplete
from distrax._src.bijectors import bijector as base
from distrax._src.utils import transformations as transformations
from typing import Callable

Array: Incomplete

class Lambda(base.Bijector):
    def __init__(
        self,
        forward: Callable[[Array], Array] | None = None,
        inverse: Callable[[Array], Array] | None = None,
        forward_log_det_jacobian: Callable[[Array], Array] | None = None,
        inverse_log_det_jacobian: Callable[[Array], Array] | None = None,
        event_ndims_in: int | None = None,
        event_ndims_out: int | None = None,
        is_constant_jacobian: bool | None = None,
    ) -> None: ...
    def forward(self, x: Array) -> Array: ...
    def inverse(self, y: Array) -> Array: ...
    def forward_log_det_jacobian(self, x: Array) -> Array: ...
    def inverse_log_det_jacobian(self, y: Array) -> Array: ...
    def forward_and_log_det(self, x: Array) -> tuple[Array, Array]: ...
    def inverse_and_log_det(self, y: Array) -> tuple[Array, Array]: ...
    def same_as(self, other: base.Bijector) -> bool: ...
