from _typeshed import Incomplete
from distrax._src.bijectors import bijector as base
from distrax._src.utils import conversion as conversion
from typing import Sequence

Array: Incomplete
BijectorLike: Incomplete
BijectorT: Incomplete

class Chain(base.Bijector):
    def __init__(self, bijectors: Sequence[BijectorLike]) -> None: ...
    @property
    def bijectors(self) -> list[BijectorT]: ...
    def forward(self, x: Array) -> Array: ...
    def inverse(self, y: Array) -> Array: ...
    def forward_and_log_det(self, x: Array) -> tuple[Array, Array]: ...
    def inverse_and_log_det(self, y: Array) -> tuple[Array, Array]: ...
    def same_as(self, other: base.Bijector) -> bool: ...
