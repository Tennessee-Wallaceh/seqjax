from _typeshed import Incomplete
from distrax._src.distributions import bernoulli as bernoulli
from distrax._src.utils import equivalence as equivalence

class BernoulliTest(equivalence.EquivalenceTest):
    p: Incomplete
    logits: Incomplete
    def setUp(self) -> None: ...
    def test_properties(self, shape, from_probs) -> None: ...
    def test_raises_on_invalid_inputs(self, dist_params) -> None: ...
    def test_sample_shape(self, distr_params, sample_shape) -> None: ...
    def test_sample_values(self, method, from_probs): ...
    def test_sample_and_log_prob(self, distr_params, sample_shape) -> None: ...
    def test_sample_dtype(self, method, dtype) -> None: ...
    def test_method_with_value(self, distr_params, value) -> None: ...
    def test_method(self, distr_params) -> None: ...
    def test_with_two_distributions(self, function_string, mode_string) -> None: ...
    def test_jittable(self) -> None: ...
    def test_slice(self, slice_, from_probs) -> None: ...
