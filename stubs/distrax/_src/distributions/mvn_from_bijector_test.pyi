from _typeshed import Incomplete
from absl.testing import parameterized
from distrax._src.bijectors import linear as linear
from distrax._src.bijectors.diag_linear import DiagLinear as DiagLinear
from distrax._src.bijectors.triangular_linear import (
    TriangularLinear as TriangularLinear,
)
from distrax._src.distributions.mvn_from_bijector import (
    MultivariateNormalFromBijector as MultivariateNormalFromBijector,
)

tfd: Incomplete
Array: Incomplete

class MockLinear(linear.Linear):
    def __init__(self, event_dims: int) -> None: ...
    def forward_and_log_det(self, x: Array) -> tuple[Array, Array]: ...

class MultivariateNormalFromBijectorTest(parameterized.TestCase):
    def test_raises_on_wrong_inputs(self, event_dims, loc) -> None: ...
    def test_loc_scale_and_shapes(self, diag, loc, expected_shape) -> None: ...
    def test_sample(self): ...
    def test_log_prob(self) -> None: ...
    def test_mean_median_mode(self, diag_shape, loc_shape) -> None: ...
    def test_variance_stddev_covariance_diag(self, scale_shape, loc_shape) -> None: ...
    def test_variance_stddev_covariance_no_diag(
        self, scale_shape, loc_shape
    ) -> None: ...
    def test_kl_divergence_diag_distributions(self) -> None: ...
    def test_kl_divergence_non_diag_distributions(self) -> None: ...
    def test_kl_divergence_raises_on_incompatible_distributions(self) -> None: ...
