import abc
import jax.numpy as jnp
import typing
from _typeshed import Incomplete
from distrax._src.utils import jittable as jittable
from typing import Generic, Sequence, TypeVar

tfd: Incomplete
Array: Incomplete
PRNGKey: Incomplete
IntLike: Incomplete
T = TypeVar("T")
NestedT: Incomplete
EventT = TypeVar("EventT", bound=NestedT[Array])
ShapeT = TypeVar("ShapeT", bound=NestedT[tuple[int, ...]])
DTypeT = TypeVar("DTypeT", bound=NestedT[jnp.dtype])

class Distribution(
    jittable.Jittable, Generic[EventT, ShapeT, DTypeT], metaclass=abc.ABCMeta
):
    @abc.abstractmethod
    def log_prob(self, value: EventT) -> Array: ...
    def prob(self, value: EventT) -> Array: ...
    @property
    @abc.abstractmethod
    def event_shape(self) -> ShapeT: ...
    @property
    def batch_shape(self) -> tuple[int, ...]: ...
    @property
    def name(self) -> str: ...
    @property
    def dtype(self) -> DTypeT: ...
    def sample(
        self, *, seed: IntLike | PRNGKey, sample_shape: IntLike | Sequence[IntLike] = ()
    ) -> EventT: ...
    def sample_and_log_prob(
        self, *, seed: IntLike | PRNGKey, sample_shape: IntLike | Sequence[IntLike] = ()
    ) -> tuple[EventT, Array]: ...
    def kl_divergence(self, other_dist, **kwargs) -> Array: ...
    def entropy(self) -> Array: ...
    def log_cdf(self, value: EventT) -> Array: ...
    def cdf(self, value: EventT) -> Array: ...
    def survival_function(self, value: EventT) -> Array: ...
    def log_survival_function(self, value: EventT) -> Array: ...
    def mean(self) -> EventT: ...
    def median(self) -> EventT: ...
    def variance(self) -> EventT: ...
    def stddev(self) -> EventT: ...
    def mode(self) -> EventT: ...
    def cross_entropy(self, other_dist, **kwargs) -> Array: ...
    def __getitem__(self, index) -> Distribution: ...

def convert_seed_and_sample_shape(
    seed: IntLike | PRNGKey, sample_shape: IntLike | Sequence[IntLike]
) -> tuple[PRNGKey, tuple[int, ...]]: ...
def to_batch_shape_index(
    batch_shape: tuple[int, ...], index
) -> tuple[jnp.ndarray, ...]: ...

DistributionLike: Incomplete
DistributionT = typing.TypeVar("DistributionT", bound=Distribution)
