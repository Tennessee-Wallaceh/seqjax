import chex
from distrax._src.distributions import distribution as distribution
from distrax._src.utils import conversion as conversion
from typing import TypeVar

DistributionT = TypeVar(
    "DistributionT", bound=distribution.NestedT[conversion.DistributionLike]
)

class Joint(distribution.Distribution):
    def __init__(self, distributions: DistributionT) -> None: ...
    def log_prob(self, value: distribution.EventT) -> chex.Array: ...
    @property
    def distributions(self) -> DistributionT: ...
    @property
    def event_shape(self) -> distribution.ShapeT: ...
    @property
    def batch_shape(self) -> tuple[int, ...]: ...
    @property
    def dtype(self) -> distribution.DTypeT: ...
    def entropy(self) -> chex.Array: ...
    def log_cdf(self, value: distribution.EventT) -> chex.Array: ...
    def mean(self) -> distribution.EventT: ...
    def median(self) -> distribution.EventT: ...
    def mode(self) -> distribution.EventT: ...
    def __getitem__(self, index) -> Joint: ...
