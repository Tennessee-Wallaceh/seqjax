from _typeshed import Incomplete
from distrax._src.distributions import multinomial as multinomial
from distrax._src.utils import equivalence as equivalence, math as math

class MultinomialTest(equivalence.EquivalenceTest):
    total_count: Incomplete
    probs: Incomplete
    logits: Incomplete
    def setUp(self) -> None: ...
    def test_parameters(self, from_logits) -> None: ...
    def test_raises_on_invalid_inputs(self, dist_params) -> None: ...
    def test_event_shape(self, dist_params) -> None: ...
    def test_sample_shape_with_int_total_count(
        self, dist_params, sample_shape
    ) -> None: ...
    def test_sample_shape_with_1d_total_count(
        self, dist_params, sample_shape
    ) -> None: ...
    def test_sample_shape_with_2d_total_count(
        self, dist_params, sample_shape
    ) -> None: ...
    def test_sum_samples(self, dist_params, sample_shape): ...
    def test_sample_and_log_prob(self, dist_params, sample_shape) -> None: ...
    def test_sample_dtype(self, dtype) -> None: ...
    def test_sample_extreme_probs(self): ...
    def test_log_prob(self, dist_params, value) -> None: ...
    def test_log_prob_extreme_probs(self) -> None: ...
    def test_entropy(self, dist_params) -> None: ...
    def test_entropy_extreme_probs(self) -> None: ...
    def test_entropy_scalar(self): ...
    def test_entropy_scalar_extreme_probs(self): ...
    def test_method(self, function_string, dist_params) -> None: ...
    def test_jittable(self) -> None: ...
    def test_slice(self, slice_) -> None: ...
    def test_slice_ellipsis(self) -> None: ...
