from distrax._src.distributions import deterministic as deterministic
from distrax._src.utils import equivalence as equivalence

class DeterministicTest(equivalence.EquivalenceTest):
    def setUp(self) -> None: ...
    def test_loc(self) -> None: ...
    def test_atol(self, atol) -> None: ...
    def test_rtol(self, rtol) -> None: ...
    def test_slack(self, atol, rtol) -> None: ...
    def test_invalid_parameters(self) -> None: ...
    def test_event_shape(self, loc) -> None: ...
    def test_sample_shape(self, loc, sample_shape) -> None: ...
    def test_sample_dtype(self, dtype) -> None: ...
    def test_sample_and_log_prob(self, loc, sample_shape) -> None: ...
    def test_method_with_inputs_at_loc(self, function_string) -> None: ...
    def test_method_with_inputs_at_random_inputs(self, function_string) -> None: ...
    def test_method_with_inputs_and_slack(
        self, function_string, inputs_stddev, atol, rtol
    ) -> None: ...
    def test_method(self, distr_params, function_string) -> None: ...
    def test_with_two_distributions(self, function_string, mode_string) -> None: ...
    def test_jittable(self) -> None: ...
    def test_slice(self, slice_) -> None: ...
    def test_slice_different_parameterization(self) -> None: ...
