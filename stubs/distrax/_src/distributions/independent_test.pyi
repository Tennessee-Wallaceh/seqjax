from _typeshed import Incomplete
from absl.testing import parameterized
from distrax._src.distributions import (
    independent as independent,
    mvn_diag as mvn_diag,
    normal as normal,
)
from distrax._src.utils import equivalence as equivalence

tfd: Incomplete

class IndependentTest(parameterized.TestCase):
    loc: Incomplete
    scale: Incomplete
    base: Incomplete
    dist: Incomplete
    def setUp(self) -> None: ...
    def assertion_fn(self, rtol): ...
    def test_constructor_is_jittable_given_ndims(self, ndims): ...
    def test_slice(self, slice_, expected_batch_shape) -> None: ...
    def test_slice_ellipsis(self) -> None: ...
    def test_vmap_inputs(self): ...
    def test_vmap_outputs(self): ...

class TFPMultivariateNormalTest(equivalence.EquivalenceTest):
    normal_loc: Incomplete
    normal_scale: Incomplete
    normal_loc2: Incomplete
    normal_scale2: Incomplete
    base_dist: Incomplete
    tfp_base_dist: Incomplete
    base_dist2: Incomplete
    tfp_base_dist2: Incomplete
    def setUp(self) -> None: ...
    def test_invalid_parameters(self) -> None: ...
    def test_event_shape(self, batch_ndims) -> None: ...
    def test_batch_shape(self, batch_ndims) -> None: ...
    def test_sample_shape(self, batch_ndims, sample_shape) -> None: ...
    def test_sample_dtype(self) -> None: ...
    def test_sample_and_log_prob(self, batch_ndims, sample_shape) -> None: ...
    def test_log_prob(self, batch_ndims, value) -> None: ...
    def test_method(self, function_string, batch_ndims) -> None: ...
    def test_with_two_distributions(
        self, function_string, mode_string, batch_ndims
    ) -> None: ...

class TFPUnivariateNormalTest(TFPMultivariateNormalTest):
    def test_jittable(self) -> None: ...

class DistraxUnivariateNormalTest(TFPMultivariateNormalTest): ...
class DistraxMultivariateNormalTest(TFPMultivariateNormalTest): ...
