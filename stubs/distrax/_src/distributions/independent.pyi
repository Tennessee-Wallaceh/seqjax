from _typeshed import Incomplete
from distrax._src.distributions import distribution as distrax_distribution
from distrax._src.utils import conversion as conversion

tfd: Incomplete
Array: Incomplete
PRNGKey: Incomplete
DistributionLike: Incomplete
EventT: Incomplete

class Independent(distrax_distribution.Distribution):
    equiv_tfp_cls: Incomplete
    def __init__(
        self,
        distribution: DistributionLike,
        reinterpreted_batch_ndims: int | None = None,
    ) -> None: ...
    @property
    def event_shape(self) -> tuple[int, ...]: ...
    @property
    def distribution(self): ...
    @property
    def reinterpreted_batch_ndims(self) -> int: ...
    @property
    def batch_shape(self) -> tuple[int, ...]: ...
    def log_prob(self, value: EventT) -> Array: ...
    def entropy(self) -> Array: ...
    def log_cdf(self, value: EventT) -> Array: ...
    def mean(self) -> Array: ...
    def median(self) -> Array: ...
    def variance(self) -> Array: ...
    def stddev(self) -> Array: ...
    def mode(self) -> Array: ...
    def __getitem__(self, index) -> Independent: ...
