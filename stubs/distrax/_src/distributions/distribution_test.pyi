from _typeshed import Incomplete
from absl.testing import parameterized
from distrax._src.distributions import distribution as distribution

class DummyUnivariateDist(distribution.Distribution):
    def log_prob(self, value) -> None: ...
    @property
    def event_shape(self): ...

class DummyMultivariateDist(distribution.Distribution):
    def __init__(self, dimension) -> None: ...
    def log_prob(self, value) -> None: ...
    @property
    def event_shape(self): ...

class DummyNestedDist(distribution.Distribution):
    def __init__(self, batch_shape=()) -> None: ...
    def log_prob(self, value) -> None: ...
    @property
    def event_shape(self): ...

class DistributionTest(parameterized.TestCase):
    uni_dist: Incomplete
    def setUp(self) -> None: ...
    def test_sample_univariate_shape(self, shape, expected_shape): ...
    def test_sample_multivariate_shape(self, var_dim, shape, expected_shape): ...
    def test_sample_nested_shape(self, shape): ...
    def test_nested_batch_shape(self, batch_shape) -> None: ...
    def test_sample_keys(self): ...
    def test_jittable(self): ...
    def test_convert_seed(self, dtype) -> None: ...
    def test_convert_sample_shape(self, shape_in, shape_out) -> None: ...
    def test_to_batch_shape_index(self, index, expected) -> None: ...
    def test_to_batch_shape_index_jnp_array(self) -> None: ...
    def test_to_batch_shape_index_raises(self, index) -> None: ...
    def test_multivariate_survival_function_raises(self) -> None: ...
