import jax.numpy as jnp
from _typeshed import Incomplete
from distrax._src.distributions import distribution as dist_base
from distrax._src.utils import conversion as conversion

tfd: Incomplete
PRNGKey: Incomplete
Array: Incomplete
DistributionLike: Incomplete
BijectorLike: Incomplete
EventT: Incomplete

class Transformed(dist_base.Distribution):
    equiv_tfp_cls: Incomplete
    def __init__(
        self, distribution: DistributionLike, bijector: BijectorLike
    ) -> None: ...
    @property
    def distribution(self): ...
    @property
    def bijector(self): ...
    @property
    def dtype(self) -> jnp.dtype: ...
    @property
    def event_shape(self) -> tuple[int, ...]: ...
    @property
    def batch_shape(self) -> tuple[int, ...]: ...
    def log_prob(self, value: EventT) -> Array: ...
    def mean(self) -> Array: ...
    def mode(self) -> Array: ...
    def entropy(self, input_hint: Array | None = None) -> Array: ...
