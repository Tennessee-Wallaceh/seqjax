from _typeshed import Incomplete
from distrax._src.distributions import (
    categorical as categorical,
    distribution as distribution,
    mixture_same_family as mixture_same_family,
    uniform as uniform,
)
from distrax._src.utils import conversion as conversion

Array: Incomplete
Numeric: Incomplete
PRNGKey: Incomplete
EventT: Incomplete

class CategoricalUniform(distribution.Distribution):
    def __init__(self, *, low: Numeric, high: Numeric, logits: Array) -> None: ...
    @property
    def event_shape(self) -> tuple[int, ...]: ...
    @property
    def batch_shape(self) -> tuple[int, ...]: ...
    def log_prob(self, value: EventT) -> Array: ...
    def entropy(self) -> Array: ...
    def mean(self) -> Array: ...
    def variance(self) -> Array: ...
    def __getitem__(self, index) -> CategoricalUniform: ...
    @property
    def low(self) -> Array: ...
    @property
    def high(self) -> Array: ...
    @property
    def logits(self) -> Array: ...
    @property
    def num_bins(self) -> int: ...
