from _typeshed import Incomplete
from absl.testing import parameterized
from distrax._src.distributions import (
    independent as independent,
    quantized as quantized,
    uniform as uniform,
)
from distrax._src.utils import equivalence as equivalence

tfd: Incomplete

class QuantizedTFPUniform(equivalence.EquivalenceTest):
    tfd_base_distribution: Incomplete
    distrax_base_distribution: Incomplete
    def setUp(self) -> None: ...
    def test_event_shape(self) -> None: ...
    def test_batch_shape(self) -> None: ...
    def test_low_and_high(self) -> None: ...
    def test_sample_shape(self, sample_shape) -> None: ...
    def test_sample_dtype(self) -> None: ...
    def test_sample_and_log_prob(self, distr_params, sample_shape) -> None: ...
    def test_method_with_value(self, distr_params, value) -> None: ...
    def test_log_prob(self, distr_params, value) -> None: ...
    def test_edge_cases(self, low, high, value) -> None: ...
    def test_method(self, distr_params, function_string) -> None: ...
    def test_jittable(self) -> None: ...

class QuantizedDistraxUniform(QuantizedTFPUniform):
    def test_jittable(self) -> None: ...

class QuantizedTFPUniform2D(equivalence.EquivalenceTest):
    tfd_base_distribution: Incomplete
    distrax_base_distribution: Incomplete
    def setUp(self) -> None: ...
    def test_event_shape(self) -> None: ...
    def test_batch_shape(self) -> None: ...
    def test_sample_shape(self, sample_shape) -> None: ...
    def test_sample_and_log_prob(self, distr_params, sample_shape): ...
    def test_method_with_value(self, distr_params, value): ...
    def test_jittable(self) -> None: ...

class QuantizedDistraxUniform2D(QuantizedTFPUniform2D):
    def test_jittable(self) -> None: ...

class QuantizedInvalidParams(equivalence.EquivalenceTest):
    def setUp(self) -> None: ...
    def test_non_univariate(self) -> None: ...
    def test_low_shape(self) -> None: ...
    def test_high_shape(self) -> None: ...

class QuantizedSlicingTest(parameterized.TestCase):
    uniform_low: Incomplete
    uniform_high: Incomplete
    base: Incomplete
    low: Incomplete
    high: Incomplete
    dist: Incomplete
    def setUp(self) -> None: ...
    def assertion_fn(self, rtol): ...
    def test_slice(self, slice_, expected_batch_shape) -> None: ...

class QuantizedSurvivalFunctionConsistencyTest(parameterized.TestCase):
    base_distribution: Incomplete
    values: Incomplete
    def setUp(self) -> None: ...
    def test_survival_function_cdf_consistency(self, dist_params): ...
    def test_log_survival_function_log_cdf_consistency(self, dist_params): ...
