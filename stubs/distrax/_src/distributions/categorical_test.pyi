from distrax._src.distributions import categorical as categorical
from distrax._src.utils import equivalence as equivalence, math as math

class CategoricalTest(equivalence.EquivalenceTest):
    def setUp(self) -> None: ...
    def test_properties(self, shape, from_probs) -> None: ...
    def test_raises_on_invalid_inputs(self, dist_params) -> None: ...
    def test_sample_shape(self, distr_params, sample_shape) -> None: ...
    def test_sample_and_log_prob(self, distr_params, sample_shape) -> None: ...
    def test_sample_dtype(self, method, dtype) -> None: ...
    def test_sample_values(self, method, from_probs): ...
    def test_sample_values_invalid_probs(self, method): ...
    def test_method_with_input(self, distr_params, value) -> None: ...
    def test_method_with_input_unnormalized_probs(self) -> None: ...
    def test_method_with_input_outside_domain(self) -> None: ...
    def test_method(self, from_probs) -> None: ...
    def test_with_two_distributions(self, function_string, mode_string) -> None: ...
    def test_with_two_distributions_extreme_cases(
        self, function_string, mode_string
    ) -> None: ...
    def test_with_two_distributions_raises_on_invalid_num_categories(
        self, function_string, mode_string
    ) -> None: ...
    def test_jittable(self) -> None: ...
    def test_slice(self, slice_, from_probs) -> None: ...
    def test_slice_ellipsis(self, from_probs) -> None: ...
    def test_vmap_inputs(self): ...
    def test_vmap_outputs(self): ...
    def test_entropy_grad(self, logits): ...
    def test_kl_grad(self, logits1, logits2): ...
