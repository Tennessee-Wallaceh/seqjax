from _typeshed import Incomplete
from distrax._src.distributions import distribution as distribution, normal as normal
from distrax._src.utils import conversion as conversion

tfd: Incomplete
Array: Incomplete
Numeric: Incomplete
PRNGKey: Incomplete
IntLike: Incomplete
EventT: Incomplete

class VonMises(distribution.Distribution):
    equiv_tfp_cls: Incomplete
    def __init__(self, loc: Numeric, concentration: Numeric) -> None: ...
    @property
    def loc(self) -> Array: ...
    @property
    def concentration(self) -> Array: ...
    @property
    def event_shape(self) -> tuple[int, ...]: ...
    @property
    def batch_shape(self) -> tuple[int, ...]: ...
    def mean(self) -> Array: ...
    def variance(self) -> Array: ...
    def prob(self, value: EventT) -> Array: ...
    def log_prob(self, value: EventT) -> Array: ...
    def entropy(self) -> Array: ...
    def mode(self) -> Array: ...
    def cdf(self, value: EventT) -> Array: ...
    def log_cdf(self, value: EventT) -> Array: ...
    def survival_function(self, value: EventT) -> Array: ...
    def log_survival_function(self, value: EventT) -> Array: ...
    def __getitem__(self, index) -> VonMises: ...
