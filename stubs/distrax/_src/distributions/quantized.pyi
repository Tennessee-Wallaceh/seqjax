import jax.numpy as jnp
from _typeshed import Incomplete
from distrax._src.distributions import distribution as base_distribution
from distrax._src.utils import conversion as conversion, math as math

tfd: Incomplete
Array: Incomplete
Numeric: Incomplete
PRNGKey: Incomplete
DistributionLike: Incomplete
DistributionT: Incomplete
EventT: Incomplete

class Quantized(base_distribution.Distribution[Array, tuple[int, ...], jnp.dtype]):
    equiv_tfp_cls: Incomplete
    def __init__(
        self,
        distribution: DistributionLike,
        low: Numeric | None = None,
        high: Numeric | None = None,
        eps: Numeric | None = None,
    ) -> None: ...
    @property
    def distribution(
        self,
    ) -> base_distribution.Distribution[Array, tuple[int, ...], jnp.dtype]: ...
    @property
    def low(self) -> Array | None: ...
    @property
    def high(self) -> Array | None: ...
    @property
    def event_shape(self) -> tuple[int, ...]: ...
    @property
    def batch_shape(self) -> tuple[int, ...]: ...
    def log_prob(self, value: EventT) -> Array: ...
    def prob(self, value: EventT) -> Array: ...
    def log_cdf(self, value: EventT) -> Array: ...
    def cdf(self, value: EventT) -> Array: ...
    def log_survival_function(self, value: EventT) -> Array: ...
    def survival_function(self, value: EventT) -> Array: ...
    def __getitem__(self, index) -> Quantized: ...
