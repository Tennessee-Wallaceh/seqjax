from _typeshed import Incomplete
from distrax._src.distributions import (
    categorical as categorical,
    one_hot_categorical as one_hot_categorical,
)
from distrax._src.utils import equivalence as equivalence, math as math

tfd: Incomplete

class OneHotCategoricalTest(equivalence.EquivalenceTest):
    p: Incomplete
    logits: Incomplete
    def setUp(self) -> None: ...
    def test_parameters_from_probs(self) -> None: ...
    def test_parameters_from_logits(self) -> None: ...
    def test_raises_on_invalid_inputs(self, dist_params) -> None: ...
    def test_negative_probs(self): ...
    def test_nan_probs(self): ...
    def test_num_categories(self, from_logits) -> None: ...
    def test_event_shape(self, distr_params) -> None: ...
    def test_sample_shape(self, distr_params, sample_shape) -> None: ...
    def test_sample_and_log_prob(self, distr_params, sample_shape) -> None: ...
    def test_sample_dtype(self, dtype) -> None: ...
    def test_sample_unique_values(self, from_logits): ...
    def test_sample_extreme_probs(self): ...
    def test_pdf(self, function_string, distr_params, value) -> None: ...
    def test_pdf_extreme_probs(
        self, function_string, distr_params, value, expected
    ) -> None: ...
    def test_method(self, function_string, distr_params) -> None: ...
    def test_cdf(self, distr_params, values) -> None: ...
    def test_with_two_distributions(self, function_string, mode_string) -> None: ...
    def test_with_categorical_and_one_hot_categorical(
        self, function_string, mode_string
    ) -> None: ...
    def test_jittable(self) -> None: ...
    def test_slice(self, slice_) -> None: ...
    def test_slice_ellipsis(self) -> None: ...
